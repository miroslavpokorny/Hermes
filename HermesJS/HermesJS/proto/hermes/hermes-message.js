/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.hermes.Message');
goog.provide('proto.hermes.Message.DataType');
goog.provide('proto.hermes.MessageCollection');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hermes.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hermes.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hermes.Message.displayName = 'proto.hermes.Message';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hermes.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.hermes.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hermes.Message} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hermes.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    origin: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mimetype: jspb.Message.getFieldWithDefault(msg, 13, ""),
    datatype: jspb.Message.getFieldWithDefault(msg, 14, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hermes.Message}
 */
proto.hermes.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hermes.Message;
  return proto.hermes.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hermes.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hermes.Message}
 */
proto.hermes.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrigin(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimetype(value);
      break;
    case 14:
      var value = /** @type {!proto.hermes.Message.DataType} */ (reader.readEnum());
      msg.setDatatype(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hermes.Message} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hermes.Message.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hermes.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hermes.Message.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getOrigin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getMimetype();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getDatatype();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = this.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.hermes.Message.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hermes.Message.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string origin = 2;
 * @return {string}
 */
proto.hermes.Message.prototype.getOrigin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hermes.Message.prototype.setOrigin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string mimeType = 13;
 * @return {string}
 */
proto.hermes.Message.prototype.getMimetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.hermes.Message.prototype.setMimetype = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional DataType dataType = 14;
 * @return {!proto.hermes.Message.DataType}
 */
proto.hermes.Message.prototype.getDatatype = function() {
  return /** @type {!proto.hermes.Message.DataType} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {!proto.hermes.Message.DataType} value */
proto.hermes.Message.prototype.setDatatype = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional bytes data = 15;
 * @return {!(string|Uint8Array)}
 */
proto.hermes.Message.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes data = 15;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.hermes.Message.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.hermes.Message.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.hermes.Message.prototype.setData = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * @enum {number}
 */
proto.hermes.Message.DataType = {
  TEXT: 0,
  BINARY: 1,
  CONTROL: 2,
  AUDIO: 3,
  VIDEO: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hermes.MessageCollection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hermes.MessageCollection.repeatedFields_, null);
};
goog.inherits(proto.hermes.MessageCollection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hermes.MessageCollection.displayName = 'proto.hermes.MessageCollection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hermes.MessageCollection.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hermes.MessageCollection.prototype.toObject = function(opt_includeInstance) {
  return proto.hermes.MessageCollection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hermes.MessageCollection} msg The msg instance to transform.
 * @return {!Object}
 */
proto.hermes.MessageCollection.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.hermes.Message.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hermes.MessageCollection}
 */
proto.hermes.MessageCollection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hermes.MessageCollection;
  return proto.hermes.MessageCollection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hermes.MessageCollection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hermes.MessageCollection}
 */
proto.hermes.MessageCollection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hermes.Message;
      reader.readMessage(value,proto.hermes.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.hermes.MessageCollection} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.hermes.MessageCollection.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hermes.MessageCollection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.hermes.MessageCollection.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hermes.Message.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Message messages = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.hermes.Message>}
 */
proto.hermes.MessageCollection.prototype.getMessagesList = function() {
  return /** @type{!Array.<!proto.hermes.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hermes.Message, 1));
};


/** @param {!Array.<!proto.hermes.Message>} value */
proto.hermes.MessageCollection.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hermes.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hermes.Message}
 */
proto.hermes.MessageCollection.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hermes.Message, opt_index);
};


proto.hermes.MessageCollection.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};


