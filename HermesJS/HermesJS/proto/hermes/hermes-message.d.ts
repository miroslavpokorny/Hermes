/// <reference path="../../../Scripts/typings/protobuf/all.d.ts"/>
declare module proto.hermes {
    class Message extends Message__Class { }
    /** Fake class which should be extended to avoid inheriting static properties */
    class Message__Class extends jspb.Message__Class  {

        /**
         * Generated by JsPbCodeGenerator.
         * @param {Array=} opt_data Optional initial data array, typically from a
         * server response, or constructed directly in Javascript. The array is used
         * in place and becomes part of the constructed object. It is not cloned.
         * If no data is provided, the constructed object will be empty, but still
         * valid.
         * @extends {jspb.Message}
         * @constructor
         */
        constructor(opt_data?: any[]);

        /**
         * Creates an object representation of this proto suitable for use in Soy templates.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
         * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
         *     for transitional soy proto support: http://goto/soy-param-migration
         * @return {!Object}
         */
        toObject(opt_includeInstance?: boolean): Object;

        /**
         * Serializes the message to binary data (in protobuf wire format).
         * @return {!Uint8Array}
         */
        serializeBinary(): Uint8Array;

        /**
         * Serializes the message to binary data (in protobuf wire format),
         * writing to the given BinaryWriter.
         * @param {!jspb.BinaryWriter} writer
         */
        serializeBinaryToWriter(writer: jspb.BinaryWriter): void;

        /**
         * optional uint32 id = 1;
         * @return {number}
         */
        getId(): number;

        /** @param {number} value */
        setId(value: number): void;

        /**
         * optional string origin = 2;
         * @return {string}
         */
        getOrigin(): string;

        /** @param {string} value */
        setOrigin(value: string): void;

        /**
         * optional string mimeType = 13;
         * @return {string}
         */
        getMimetype(): string;

        /** @param {string} value */
        setMimetype(value: string): void;

        /**
         * optional DataType dataType = 14;
         * @return {!proto.hermes.Message.DataType}
         */
        getDatatype(): proto.hermes.Message.DataType;

        /** @param {!proto.hermes.Message.DataType} value */
        setDatatype(value: proto.hermes.Message.DataType): void;

        /**
         * optional bytes data = 15;
         * @return {!(string|Uint8Array)}
         */
        getData(): string|Uint8Array;

        /**
         * optional bytes data = 15;
         * This is a type-conversion wrapper around `getData()`
         * @return {string}
         */
        getData_asB64(): string;

        /**
         * optional bytes data = 15;
         * Note that Uint8Array is not supported on all browsers.
         * @see http://caniuse.com/Uint8Array
         * This is a type-conversion wrapper around `getData()`
         * @return {!Uint8Array}
         */
        getData_asU8(): Uint8Array;

        /** @param {!(string|Uint8Array)} value */
        setData(value: string|Uint8Array): void;
    }


    class MessageCollection extends MessageCollection__Class { }
    /** Fake class which should be extended to avoid inheriting static properties */
    class MessageCollection__Class extends jspb.Message__Class  {

        /**
         * Generated by JsPbCodeGenerator.
         * @param {Array=} opt_data Optional initial data array, typically from a
         * server response, or constructed directly in Javascript. The array is used
         * in place and becomes part of the constructed object. It is not cloned.
         * If no data is provided, the constructed object will be empty, but still
         * valid.
         * @extends {jspb.Message}
         * @constructor
         */
        constructor(opt_data?: any[]);

        /**
         * Creates an object representation of this proto suitable for use in Soy templates.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
         * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
         *     for transitional soy proto support: http://goto/soy-param-migration
         * @return {!Object}
         */
        toObject(opt_includeInstance?: boolean): Object;

        /**
         * Serializes the message to binary data (in protobuf wire format).
         * @return {!Uint8Array}
         */
        serializeBinary(): Uint8Array;

        /**
         * Serializes the message to binary data (in protobuf wire format),
         * writing to the given BinaryWriter.
         * @param {!jspb.BinaryWriter} writer
         */
        serializeBinaryToWriter(writer: jspb.BinaryWriter): void;

        /**
         * repeated Message messages = 1;
         * If you change this array by adding, removing or replacing elements, or if you
         * replace the array itself, then you must call the setter to update it.
         * @return {!Array.<!proto.hermes.Message>}
         */
        getMessagesList(): proto.hermes.Message[];

        /** @param {!Array.<!proto.hermes.Message>} value */
        setMessagesList(value: proto.hermes.Message[]): void;

        /**
         * @param {!proto.hermes.Message=} opt_value
         * @param {number=} opt_index
         * @return {!proto.hermes.Message}
         */
        addMessages(opt_value?: proto.hermes.Message, opt_index?: number): proto.hermes.Message;
    }

}

declare module proto.hermes.Message {

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.hermes.Message} msg The msg instance to transform.
     * @return {!Object}
     */
    function toObject(includeInstance: boolean|any /*undefined*/, msg: proto.hermes.Message): Object;

    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.hermes.Message}
     */
    function deserializeBinary(bytes: jspb.ByteSource): proto.hermes.Message;

    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.hermes.Message} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.hermes.Message}
     */
    function deserializeBinaryFromReader(msg: proto.hermes.Message, reader: jspb.BinaryReader): proto.hermes.Message;

    /**
     * Class method variant: serializes the given message to binary data
     * (in protobuf wire format), writing to the given BinaryWriter.
     * @param {!proto.hermes.Message} message
     * @param {!jspb.BinaryWriter} writer
     */
    function serializeBinaryToWriter(message: proto.hermes.Message, writer: jspb.BinaryWriter): void;

    /**
     * @enum {number}
     */
    enum DataType { TEXT, BINARY, CONTROL, AUDIO, VIDEO }
}

declare module proto.hermes.MessageCollection {

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.hermes.MessageCollection} msg The msg instance to transform.
     * @return {!Object}
     */
    function toObject(includeInstance: boolean|any /*undefined*/, msg: proto.hermes.MessageCollection): Object;

    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.hermes.MessageCollection}
     */
    function deserializeBinary(bytes: jspb.ByteSource): proto.hermes.MessageCollection;

    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.hermes.MessageCollection} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.hermes.MessageCollection}
     */
    function deserializeBinaryFromReader(msg: proto.hermes.MessageCollection, reader: jspb.BinaryReader): proto.hermes.MessageCollection;

    /**
     * Class method variant: serializes the given message to binary data
     * (in protobuf wire format), writing to the given BinaryWriter.
     * @param {!proto.hermes.MessageCollection} message
     * @param {!jspb.BinaryWriter} writer
     */
    function serializeBinaryToWriter(message: proto.hermes.MessageCollection, writer: jspb.BinaryWriter): void;
}
